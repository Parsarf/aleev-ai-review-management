// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")        // pooled (Vercel runtime)
  directUrl = env("DATABASE_DIRECT_URL") // unpooled (for migrate)
}

enum UserRole {
  OWNER
  MANAGER
  STAFF
}

enum Platform {
  GOOGLE
  YELP
  FACEBOOK
  TRIPADVISOR
}

enum ReviewStatus {
  NEEDS_REPLY
  AUTO_SENT
  FLAGGED
  RESOLVED
}

enum ReplyStatus {
  DRAFT
  APPROVED
  SENT
  FAILED
}

enum TicketSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(STAFF)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  businesses     Business[]
  sentReplies    Reply[]
  assignedTickets Ticket[]
  auditLogs      AuditLog[]

  @@map("users")
}

model Business {
  id         String   @id @default(cuid())
  name       String
  brandRules String?  @default("")
  tone       String   @default("professional")
  ownerId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  locations    Location[]
  subscriptions Subscription[]

  @@map("businesses")
}

model Location {
  id              String   @id @default(cuid())
  businessId      String
  name            String
  address         String?
  platformAccounts Json?   // Store platform-specific account info
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  reviews  Review[]

  @@map("locations")
}

model Review {
  id           String       @id @default(cuid())
  locationId   String
  platform     Platform
  platformId   String       @unique // External platform review ID
  stars        Int
  text         String
  language     String?      @default("en")
  status       ReviewStatus @default(NEEDS_REPLY)
  authorName   String?
  authorAvatar String?
  url          String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  reply    Reply?
  ticket   Ticket?

  @@map("reviews")
}

model Reply {
  id         String      @id @default(cuid())
  reviewId   String      @unique
  draftText  String?
  finalText  String?
  tone       String?
  status     ReplyStatus @default(DRAFT)
  sentById   String?
  sentAt     DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  review  Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  sentBy  User?  @relation(fields: [sentById], references: [id])

  @@map("replies")
}

model Ticket {
  id          String         @id @default(cuid())
  reviewId    String         @unique
  issueType   String
  severity    TicketSeverity @default(LOW)
  assigneeId  String?
  status      TicketStatus   @default(OPEN)
  comments    Json[]         @default([])
  dueDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  assignee User?  @relation(fields: [assigneeId], references: [id])

  @@map("tickets")
}

model Subscription {
  id         String             @id @default(cuid())
  businessId String             @unique
  plan       String
  stripeId   String             @unique
  status     SubscriptionStatus @default(ACTIVE)
  endsAt     DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Metrics {
  id        String   @id @default(cuid())
  businessId String
  date      DateTime @unique
  coverage  Float    @default(0)
  avgResponseTime Float @default(0)
  totalReviews Int   @default(0)
  avgRating   Float  @default(0)
  createdAt DateTime @default(now())

  @@map("metrics")
}